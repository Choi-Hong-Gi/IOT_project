
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5b  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086d  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037c  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000423  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c4  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	06 d0       	rcall	.+12     	; 0xc0 <main>
  b4:	3a c0       	rjmp	.+116    	; 0x12a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <CPU_Setup>:
void count_up(){
	for (unsigned char k=0; k<10; k++){
		FND_DB=FND[k];
		_delay_ms(300);
	}
}
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	87 bb       	out	0x17, r24	; 23
  bc:	82 b9       	out	0x02, r24	; 2
  be:	08 95       	ret

000000c0 <main>:
	
int main(void)
{
	CPU_Setup();
  c0:	fb df       	rcall	.-10     	; 0xb8 <CPU_Setup>
	
    while (1) 
    {
		FND_SEL=~0x20;
  c2:	8f ed       	ldi	r24, 0xDF	; 223
  c4:	88 bb       	out	0x18, r24	; 24
		
		//count_up();
		
		FND_SEL=~0x01; FND_DB=FND[6]; _delay_ms(dTime);
  c6:	9e ef       	ldi	r25, 0xFE	; 254
  c8:	98 bb       	out	0x18, r25	; 24
  ca:	e0 e0       	ldi	r30, 0x00	; 0
  cc:	f1 e0       	ldi	r31, 0x01	; 1
  ce:	96 81       	ldd	r25, Z+6	; 0x06
  d0:	93 b9       	out	0x03, r25	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	a3 e3       	ldi	r26, 0x33	; 51
  d4:	bb e2       	ldi	r27, 0x2B	; 43
  d6:	11 97       	sbiw	r26, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x16>
		FND_SEL=~0x02; FND_DB=FND[5]; _delay_ms(dTime);
  da:	9d ef       	ldi	r25, 0xFD	; 253
  dc:	98 bb       	out	0x18, r25	; 24
  de:	95 81       	ldd	r25, Z+5	; 0x05
  e0:	93 b9       	out	0x03, r25	; 3
  e2:	a3 e3       	ldi	r26, 0x33	; 51
  e4:	bb e2       	ldi	r27, 0x2B	; 43
  e6:	11 97       	sbiw	r26, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x26>
		FND_SEL=~0x04; FND_DB=FND[4]; _delay_ms(dTime);
  ea:	9b ef       	ldi	r25, 0xFB	; 251
  ec:	98 bb       	out	0x18, r25	; 24
  ee:	94 81       	ldd	r25, Z+4	; 0x04
  f0:	93 b9       	out	0x03, r25	; 3
  f2:	a3 e3       	ldi	r26, 0x33	; 51
  f4:	bb e2       	ldi	r27, 0x2B	; 43
  f6:	11 97       	sbiw	r26, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x36>
		FND_SEL=~0x08; FND_DB=FND[3]; _delay_ms(dTime);
  fa:	97 ef       	ldi	r25, 0xF7	; 247
  fc:	98 bb       	out	0x18, r25	; 24
  fe:	93 81       	ldd	r25, Z+3	; 0x03
 100:	93 b9       	out	0x03, r25	; 3
 102:	a3 e3       	ldi	r26, 0x33	; 51
 104:	bb e2       	ldi	r27, 0x2B	; 43
 106:	11 97       	sbiw	r26, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x46>
		FND_SEL=~0x10; FND_DB=FND[2]; _delay_ms(dTime);
 10a:	9f ee       	ldi	r25, 0xEF	; 239
 10c:	98 bb       	out	0x18, r25	; 24
 10e:	92 81       	ldd	r25, Z+2	; 0x02
 110:	93 b9       	out	0x03, r25	; 3
 112:	a3 e3       	ldi	r26, 0x33	; 51
 114:	bb e2       	ldi	r27, 0x2B	; 43
 116:	11 97       	sbiw	r26, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x56>
		FND_SEL=~0x20; FND_DB=FND[1]; _delay_ms(dTime);
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	81 81       	ldd	r24, Z+1	; 0x01
 11e:	83 b9       	out	0x03, r24	; 3
 120:	83 e3       	ldi	r24, 0x33	; 51
 122:	9b e2       	ldi	r25, 0x2B	; 43
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x64>
 128:	cc cf       	rjmp	.-104    	; 0xc2 <main+0x2>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
