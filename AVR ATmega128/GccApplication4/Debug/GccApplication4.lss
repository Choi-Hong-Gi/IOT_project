
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001f2  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800114  00800114  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097d  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086e  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000377  00000000  00000000  0000152f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018c  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	34 d0       	rcall	.+104    	; 0x12c <main>
  c4:	94 c0       	rjmp	.+296    	; 0x1ee <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <CPU_Setup>:
				if (++NUM[3] >9) {
					NUM[3] = 0x00;
					if (++NUM[4] >9) {
						NUM[4] = 0x00;
						if (++NUM[5] >9) {
							NUM[5] = 0x00;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	82 b9       	out	0x02, r24	; 2
  ce:	08 95       	ret

000000d0 <Hex2Dec>:
		}
	}
}


void Hex2Dec(void) {
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
	unsigned long temp=Count;
  d4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <Count>
  d8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <Count+0x1>
  dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Count+0x2>
  e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Count+0x3>
	NUM[5] = temp/100000;
  e4:	20 ea       	ldi	r18, 0xA0	; 160
  e6:	36 e8       	ldi	r19, 0x86	; 134
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	5e d0       	rcall	.+188    	; 0x1aa <__udivmodsi4>
  ee:	c4 e1       	ldi	r28, 0x14	; 20
  f0:	d1 e0       	ldi	r29, 0x01	; 1
  f2:	2d 83       	std	Y+5, r18	; 0x05
	temp = temp%100000;
	NUM[4] = temp/10000;
  f4:	20 e1       	ldi	r18, 0x10	; 16
  f6:	37 e2       	ldi	r19, 0x27	; 39
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	56 d0       	rcall	.+172    	; 0x1aa <__udivmodsi4>
  fe:	2c 83       	std	Y+4, r18	; 0x04
	temp = temp%10000;
	NUM[3] = temp/1000;
 100:	28 ee       	ldi	r18, 0xE8	; 232
 102:	33 e0       	ldi	r19, 0x03	; 3
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	50 d0       	rcall	.+160    	; 0x1aa <__udivmodsi4>
 10a:	2b 83       	std	Y+3, r18	; 0x03
	temp = temp%1000;
	NUM[2] = temp/100;
 10c:	24 e6       	ldi	r18, 0x64	; 100
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	4a d0       	rcall	.+148    	; 0x1aa <__udivmodsi4>
 116:	2a 83       	std	Y+2, r18	; 0x02
	temp = temp%100;
	NUM[1] = temp/10;
 118:	2a e0       	ldi	r18, 0x0A	; 10
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	44 d0       	rcall	.+136    	; 0x1aa <__udivmodsi4>
 122:	29 83       	std	Y+1, r18	; 0x01
	NUM[0] = temp%10;
 124:	68 83       	st	Y, r22
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <main>:

int main(void)
{
    CPU_Setup();
 12c:	cd df       	rcall	.-102    	; 0xc8 <CPU_Setup>
	
    while (1) 
    {
		for (unsigned char k=0; k<6; k++) {
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	15 c0       	rjmp	.+42     	; 0x15c <main+0x30>
			FND_SEL = DGT[k];
 132:	82 2f       	mov	r24, r18
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	ec 5f       	subi	r30, 0xFC	; 252
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	30 81       	ld	r19, Z
 13e:	38 bb       	out	0x18, r19	; 24
			FND_DB = FND[NUM[k]];
 140:	fc 01       	movw	r30, r24
 142:	ec 5e       	subi	r30, 0xEC	; 236
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	e0 81       	ld	r30, Z
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e6 5f       	subi	r30, 0xF6	; 246
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	80 81       	ld	r24, Z
 150:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	83 e3       	ldi	r24, 0x33	; 51
 154:	9b e2       	ldi	r25, 0x2B	; 43
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x2a>
{
    CPU_Setup();
	
    while (1) 
    {
		for (unsigned char k=0; k<6; k++) {
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	26 30       	cpi	r18, 0x06	; 6
			FND_SEL = DGT[k];
			FND_DB = FND[NUM[k]];
			_delay_ms(dTime);
		}
		//BCD_UP( );
		Hex2Dec();
 15e:	48 f3       	brcs	.-46     	; 0x132 <main+0x6>
 160:	b7 df       	rcall	.-146    	; 0xd0 <Hex2Dec>
		if(--Count<=0)
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Count>
 166:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Count+0x1>
 16a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <Count+0x2>
 16e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <Count+0x3>
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	a1 09       	sbc	r26, r1
 176:	b1 09       	sbc	r27, r1
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Count>
 17c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Count+0x1>
 180:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <Count+0x2>
 184:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <Count+0x3>
 188:	89 2b       	or	r24, r25
 18a:	8a 2b       	or	r24, r26
 18c:	8b 2b       	or	r24, r27
 18e:	79 f6       	brne	.-98     	; 0x12e <main+0x2>
			Count = 999999;
 190:	8f e3       	ldi	r24, 0x3F	; 63
 192:	92 e4       	ldi	r25, 0x42	; 66
 194:	af e0       	ldi	r26, 0x0F	; 15
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Count>
 19c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Count+0x1>
 1a0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <Count+0x2>
 1a4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <Count+0x3>
 1a8:	c2 cf       	rjmp	.-124    	; 0x12e <main+0x2>

000001aa <__udivmodsi4>:
 1aa:	a1 e2       	ldi	r26, 0x21	; 33
 1ac:	1a 2e       	mov	r1, r26
 1ae:	aa 1b       	sub	r26, r26
 1b0:	bb 1b       	sub	r27, r27
 1b2:	fd 01       	movw	r30, r26
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <__udivmodsi4_ep>

000001b6 <__udivmodsi4_loop>:
 1b6:	aa 1f       	adc	r26, r26
 1b8:	bb 1f       	adc	r27, r27
 1ba:	ee 1f       	adc	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	a2 17       	cp	r26, r18
 1c0:	b3 07       	cpc	r27, r19
 1c2:	e4 07       	cpc	r30, r20
 1c4:	f5 07       	cpc	r31, r21
 1c6:	20 f0       	brcs	.+8      	; 0x1d0 <__udivmodsi4_ep>
 1c8:	a2 1b       	sub	r26, r18
 1ca:	b3 0b       	sbc	r27, r19
 1cc:	e4 0b       	sbc	r30, r20
 1ce:	f5 0b       	sbc	r31, r21

000001d0 <__udivmodsi4_ep>:
 1d0:	66 1f       	adc	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	88 1f       	adc	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	1a 94       	dec	r1
 1da:	69 f7       	brne	.-38     	; 0x1b6 <__udivmodsi4_loop>
 1dc:	60 95       	com	r22
 1de:	70 95       	com	r23
 1e0:	80 95       	com	r24
 1e2:	90 95       	com	r25
 1e4:	9b 01       	movw	r18, r22
 1e6:	ac 01       	movw	r20, r24
 1e8:	bd 01       	movw	r22, r26
 1ea:	cf 01       	movw	r24, r30
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
