
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f44  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f6  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000521  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000021a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000471  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048b  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	98 c0       	rjmp	.+304    	; 0x1e6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
int sec = 50;

int main(void){
	//unsigned long Count = 0;
	
	LCD_Init();
  b8:	62 d0       	rcall	.+196    	; 0x17e <LCD_Init>
	
	write_Command(0x01); /* Clear Display */
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2a d0       	rcall	.+84     	; 0x114 <write_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	89 e9       	ldi	r24, 0x99	; 153
  c2:	91 e8       	ldi	r25, 0x81	; 129
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x12>
	_delay_ms(9);
	write_Command(0x80); /* 1 Line Address */
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	22 d0       	rcall	.+68     	; 0x114 <write_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8b e2       	ldi	r24, 0x2B	; 43
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	01 97       	sbiw	r24, 0x01	; 1
	_delay_us(220);
	printString ( "  IoT Smart SW " );
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x1c>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	91 e0       	ldi	r25, 0x01	; 1
	write_Command(0xC0); /* 2 line Address */
  dc:	44 d0       	rcall	.+136    	; 0x166 <printString>
  de:	80 ec       	ldi	r24, 0xC0	; 192
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	18 d0       	rcall	.+48     	; 0x114 <write_Command>
  e4:	8b e2       	ldi	r24, 0x2B	; 43
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	01 97       	sbiw	r24, 0x01	; 1
		}
		
		_delay_ms(990);
		*/
		
		write_Command(0xC1);
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x30>
  ec:	81 ec       	ldi	r24, 0xC1	; 193
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	11 d0       	rcall	.+34     	; 0x114 <write_Command>
  f2:	8b e2       	ldi	r24, 0x2B	; 43
  f4:	93 e0       	ldi	r25, 0x03	; 3
  f6:	01 97       	sbiw	r24, 0x01	; 1
		_delay_us(220);
		printString ("010-1234-5678");
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x3e>
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	33 d0       	rcall	.+102    	; 0x166 <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	9f ef       	ldi	r25, 0xFF	; 255
 102:	2f e7       	ldi	r18, 0x7F	; 127
 104:	86 e1       	ldi	r24, 0x16	; 22
 106:	91 50       	subi	r25, 0x01	; 1
 108:	20 40       	sbci	r18, 0x00	; 0
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x4e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x58>
 110:	00 00       	nop
 112:	ec cf       	rjmp	.-40     	; 0xec <main+0x34>

00000114 <write_Command>:

#include <avr/io.h>
#include <util/delay.h>

void write_Command ( unsigned char command ) {
	LCD_CD_PORT = 0x00;		/* E = 0, R/W = 0, RS = 0 */
 114:	18 ba       	out	0x18, r1	; 24
	LCD_DB_PORT = command;	/* Command */
 116:	83 b9       	out	0x03, r24	; 3
	LCD_CD_PORT |= 0x04;
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	85 e9       	ldi	r24, 0x95	; 149
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <write_Command+0xe>
 126:	00 c0       	rjmp	.+0      	; 0x128 <write_Command+0x14>
	_delay_us(110);			/* E = 1 Essential Delay for Simulator */
	LCD_CD_PORT &= ~(0x04);
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	8b 7f       	andi	r24, 0xFB	; 251
 12c:	88 bb       	out	0x18, r24	; 24
 12e:	85 e9       	ldi	r24, 0x95	; 149
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <write_Command+0x1e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <write_Command+0x24>
 138:	08 95       	ret

0000013a <write_Data>:
	_delay_us(110);			/* E = 0 */
}

void write_Data ( unsigned char data ) {
	LCD_CD_PORT = 0x00;		/* RS = 0, R/W = 0, E = 0 */
 13a:	18 ba       	out	0x18, r1	; 24
	LCD_CD_PORT |= 0x01;	/* RS = 1, DR->DDRAM */
 13c:	98 b3       	in	r25, 0x18	; 24
 13e:	91 60       	ori	r25, 0x01	; 1
 140:	98 bb       	out	0x18, r25	; 24
	LCD_DB_PORT = data;
 142:	83 b9       	out	0x03, r24	; 3
	LCD_CD_PORT |= 0x04;	/* E = 1 */
 144:	88 b3       	in	r24, 0x18	; 24
 146:	84 60       	ori	r24, 0x04	; 4
 148:	88 bb       	out	0x18, r24	; 24
 14a:	85 e9       	ldi	r24, 0x95	; 149
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <write_Data+0x14>
 152:	00 c0       	rjmp	.+0      	; 0x154 <write_Data+0x1a>
	_delay_us(110);			/* Essential Delay for Simulator */
	LCD_CD_PORT &= ~(0x04);	/* E = 0 */
 154:	88 b3       	in	r24, 0x18	; 24
 156:	8b 7f       	andi	r24, 0xFB	; 251
 158:	88 bb       	out	0x18, r24	; 24
 15a:	85 e9       	ldi	r24, 0x95	; 149
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <write_Data+0x24>
 162:	00 c0       	rjmp	.+0      	; 0x164 <write_Data+0x2a>
 164:	08 95       	ret

00000166 <printString>:
	_delay_us(110);
}


void printString ( char *string ) {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	while ( *string != '\0' ) {
 16c:	02 c0       	rjmp	.+4      	; 0x172 <printString+0xc>
		write_Data ( *string );
 16e:	e5 df       	rcall	.-54     	; 0x13a <write_Data>
		string ++;
 170:	21 96       	adiw	r28, 0x01	; 1
	_delay_us(110);
}


void printString ( char *string ) {
	while ( *string != '\0' ) {
 172:	88 81       	ld	r24, Y
 174:	81 11       	cpse	r24, r1
 176:	fb cf       	rjmp	.-10     	; 0x16e <printString+0x8>
		write_Data ( *string );
		string ++;
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <LCD_Init>:

void LCD_Init (void) {
	LCD_DB_DDR=0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	82 b9       	out	0x02, r24	; 2
	LCD_DB_PORT=0x00;
 182:	13 b8       	out	0x03, r1	; 3
	LCD_CD_DDR=0x07;	// 신호선 3 PIN 출력설정
 184:	87 e0       	ldi	r24, 0x07	; 7
 186:	87 bb       	out	0x17, r24	; 23
	LCD_CD_PORT=0x00;
 188:	18 ba       	out	0x18, r1	; 24
 18a:	85 e9       	ldi	r24, 0x95	; 149
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_Init+0x10>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_Init+0x16>
	_delay_us(110);
	LCD_CD_PORT &= ~(0x04);
 194:	88 b3       	in	r24, 0x18	; 24
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	88 bb       	out	0x18, r24	; 24
 19a:	85 e9       	ldi	r24, 0x95	; 149
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCD_Init+0x20>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_Init+0x26>
	_delay_us(110);	/* E = 0 */
	write_Command(0x38);
 1a4:	88 e3       	ldi	r24, 0x38	; 56
 1a6:	b6 df       	rcall	.-148    	; 0x114 <write_Command>
 1a8:	8b e2       	ldi	r24, 0x2B	; 43
 1aa:	93 e0       	ldi	r25, 0x03	; 3
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Init+0x2e>
	_delay_us(220);	/* Function set */
	write_Command(0x0F);
 1b0:	8f e0       	ldi	r24, 0x0F	; 15
 1b2:	b0 df       	rcall	.-160    	; 0x114 <write_Command>
 1b4:	8b e2       	ldi	r24, 0x2B	; 43
 1b6:	93 e0       	ldi	r25, 0x03	; 3
 1b8:	01 97       	sbiw	r24, 0x01	; 1
	_delay_us(220);	/* Display ON */
	write_Command(0x02);
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Init+0x3a>
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	aa df       	rcall	.-172    	; 0x114 <write_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	89 e9       	ldi	r24, 0x99	; 153
 1c2:	91 e8       	ldi	r25, 0x81	; 129
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_Init+0x46>
	_delay_ms(9);		/* Cursor At Home */
	write_Command(0x01);
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_Init+0x4c>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	a3 df       	rcall	.-186    	; 0x114 <write_Command>
 1ce:	89 e9       	ldi	r24, 0x99	; 153
 1d0:	91 e8       	ldi	r25, 0x81	; 129
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_Init+0x54>
	_delay_ms(9);		/* Clear Display */
	write_Command(0x06);
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_Init+0x5a>
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	9c df       	rcall	.-200    	; 0x114 <write_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8b e2       	ldi	r24, 0x2B	; 43
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_Init+0x62>
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
